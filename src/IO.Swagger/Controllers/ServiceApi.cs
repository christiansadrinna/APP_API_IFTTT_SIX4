/*
 * six4one
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ServiceApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="accept"></param>
        /// <param name="acceptCharset"></param>
        /// <param name="acceptEncoding"></param>
        /// <param name="xRequestID"></param>
        /// <response code="200">OK</response>
        /// <response code="503">Your service is not available at the moment, but IFTTT should try again later.</response>
        [HttpGet]
        [Route("/ifttt/v1/status")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("StatusGet")]
        [SwaggerResponse(statusCode: 503, type: typeof(Errors), description: "Your service is not available at the moment, but IFTTT should try again later.")]
        public virtual IActionResult StatusGet([FromHeader]string accept, [FromHeader]string acceptCharset, [FromHeader]List<string> acceptEncoding, [FromHeader]string xRequestID)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Errors));


            throw new NotImplementedException();
        }
    }
}
