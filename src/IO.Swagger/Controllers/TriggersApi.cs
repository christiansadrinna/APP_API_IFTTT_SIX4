/*
 * six4one
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class TriggersApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="body">Trigger request for knowledge.</param>
        /// <param name="accept"></param>
        /// <param name="acceptCharset"></param>
        /// <param name="acceptEncoding"></param>
        /// <param name="xRequestID"></param>
        /// <response code="200">Trigger response for knowledge.</response>
        /// <response code="400">There was something wrong with incoming data from IFTTT. Provide an error response body to clarify what went wrong.</response>
        /// <response code="401">IFTTT sent an OAuth2 access token that isn’t valid.</response>
        /// <response code="404">IFTTT is trying to reach a URL that doesn’t exist.</response>
        /// <response code="429">IFTTT has sent too many requests in a given amount of time.</response>
        /// <response code="500">There was an error in your application logic.</response>
        /// <response code="503">Your service is not available at the moment, but IFTTT should try again later.</response>
        [HttpPost]
        [Route("/ifttt/v1/triggers/knowledge")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("TriggersKnowledgePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2002), description: "Trigger response for knowledge.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Errors), description: "There was something wrong with incoming data from IFTTT. Provide an error response body to clarify what went wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Errors), description: "IFTTT sent an OAuth2 access token that isn’t valid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Errors), description: "IFTTT is trying to reach a URL that doesn’t exist.")]
        [SwaggerResponse(statusCode: 429, type: typeof(Errors), description: "IFTTT has sent too many requests in a given amount of time.")]
        [SwaggerResponse(statusCode: 500, type: typeof(Errors), description: "There was an error in your application logic.")]
        [SwaggerResponse(statusCode: 503, type: typeof(Errors), description: "Your service is not available at the moment, but IFTTT should try again later.")]
        public virtual IActionResult TriggersKnowledgePost([FromBody]object body, [FromHeader]string accept, [FromHeader]string acceptCharset, [FromHeader]List<string> acceptEncoding, [FromHeader]string xRequestID)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2002));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Errors));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Errors));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Errors));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(Errors));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Errors));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Errors));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"meta\" : {\n      \"id\" : \"id\",\n      \"timestamp\" : 0\n    },\n    \"created_at\" : { },\n    \"title\" : { }\n  }, {\n    \"meta\" : {\n      \"id\" : \"id\",\n      \"timestamp\" : 0\n    },\n    \"created_at\" : { },\n    \"title\" : { }\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2002>(exampleJson)
            : default(InlineResponse2002);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="body">Trigger request for motivation.</param>
        /// <param name="accept"></param>
        /// <param name="acceptCharset"></param>
        /// <param name="acceptEncoding"></param>
        /// <param name="xRequestID"></param>
        /// <response code="200">Trigger response for motivation.</response>
        /// <response code="400">There was something wrong with incoming data from IFTTT. Provide an error response body to clarify what went wrong.</response>
        /// <response code="401">IFTTT sent an OAuth2 access token that isn’t valid.</response>
        /// <response code="404">IFTTT is trying to reach a URL that doesn’t exist.</response>
        /// <response code="429">IFTTT has sent too many requests in a given amount of time.</response>
        /// <response code="500">There was an error in your application logic.</response>
        /// <response code="503">Your service is not available at the moment, but IFTTT should try again later.</response>
        [HttpPost]
        [Route("/ifttt/v1/triggers/motivation")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("TriggersMotivationPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2001), description: "Trigger response for motivation.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Errors), description: "There was something wrong with incoming data from IFTTT. Provide an error response body to clarify what went wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Errors), description: "IFTTT sent an OAuth2 access token that isn’t valid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Errors), description: "IFTTT is trying to reach a URL that doesn’t exist.")]
        [SwaggerResponse(statusCode: 429, type: typeof(Errors), description: "IFTTT has sent too many requests in a given amount of time.")]
        [SwaggerResponse(statusCode: 500, type: typeof(Errors), description: "There was an error in your application logic.")]
        [SwaggerResponse(statusCode: 503, type: typeof(Errors), description: "Your service is not available at the moment, but IFTTT should try again later.")]
        public virtual IActionResult TriggersMotivationPost([FromBody]object body, [FromHeader]string accept, [FromHeader]string acceptCharset, [FromHeader]List<string> acceptEncoding, [FromHeader]string xRequestID)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2001));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Errors));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Errors));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Errors));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(Errors));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Errors));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Errors));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"meme\" : { },\n    \"meta\" : {\n      \"id\" : \"id\",\n      \"timestamp\" : 0\n    },\n    \"created_at\" : { }\n  }, {\n    \"meme\" : { },\n    \"meta\" : {\n      \"id\" : \"id\",\n      \"timestamp\" : 0\n    },\n    \"created_at\" : { }\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2001>(exampleJson)
            : default(InlineResponse2001);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="body">Trigger request for reflection.</param>
        /// <param name="accept"></param>
        /// <param name="acceptCharset"></param>
        /// <param name="acceptEncoding"></param>
        /// <param name="xRequestID"></param>
        /// <response code="200">Trigger response for reflection.</response>
        /// <response code="400">There was something wrong with incoming data from IFTTT. Provide an error response body to clarify what went wrong.</response>
        /// <response code="401">IFTTT sent an OAuth2 access token that isn’t valid.</response>
        /// <response code="404">IFTTT is trying to reach a URL that doesn’t exist.</response>
        /// <response code="429">IFTTT has sent too many requests in a given amount of time.</response>
        /// <response code="500">There was an error in your application logic.</response>
        /// <response code="503">Your service is not available at the moment, but IFTTT should try again later.</response>
        [HttpPost]
        [Route("/ifttt/v1/triggers/reflection")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("TriggersReflectionPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2003), description: "Trigger response for reflection.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Errors), description: "There was something wrong with incoming data from IFTTT. Provide an error response body to clarify what went wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Errors), description: "IFTTT sent an OAuth2 access token that isn’t valid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Errors), description: "IFTTT is trying to reach a URL that doesn’t exist.")]
        [SwaggerResponse(statusCode: 429, type: typeof(Errors), description: "IFTTT has sent too many requests in a given amount of time.")]
        [SwaggerResponse(statusCode: 500, type: typeof(Errors), description: "There was an error in your application logic.")]
        [SwaggerResponse(statusCode: 503, type: typeof(Errors), description: "Your service is not available at the moment, but IFTTT should try again later.")]
        public virtual IActionResult TriggersReflectionPost([FromBody]object body, [FromHeader]string accept, [FromHeader]string acceptCharset, [FromHeader]List<string> acceptEncoding, [FromHeader]string xRequestID)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2003));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Errors));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Errors));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Errors));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(Errors));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Errors));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Errors));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"meta\" : {\n      \"id\" : \"id\",\n      \"timestamp\" : 0\n    },\n    \"created_at\" : { },\n    \"audio\" : { }\n  }, {\n    \"meta\" : {\n      \"id\" : \"id\",\n      \"timestamp\" : 0\n    },\n    \"created_at\" : { },\n    \"audio\" : { }\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse2003>(exampleJson)
            : default(InlineResponse2003);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="body">Trigger request for task.</param>
        /// <param name="accept"></param>
        /// <param name="acceptCharset"></param>
        /// <param name="acceptEncoding"></param>
        /// <param name="xRequestID"></param>
        /// <response code="200">Trigger response for task.</response>
        /// <response code="400">There was something wrong with incoming data from IFTTT. Provide an error response body to clarify what went wrong.</response>
        /// <response code="401">IFTTT sent an OAuth2 access token that isn’t valid.</response>
        /// <response code="404">IFTTT is trying to reach a URL that doesn’t exist.</response>
        /// <response code="429">IFTTT has sent too many requests in a given amount of time.</response>
        /// <response code="500">There was an error in your application logic.</response>
        /// <response code="503">Your service is not available at the moment, but IFTTT should try again later.</response>
        [HttpPost]
        [Route("/ifttt/v1/triggers/task")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("TriggersTaskPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "Trigger response for task.")]
        [SwaggerResponse(statusCode: 400, type: typeof(Errors), description: "There was something wrong with incoming data from IFTTT. Provide an error response body to clarify what went wrong.")]
        [SwaggerResponse(statusCode: 401, type: typeof(Errors), description: "IFTTT sent an OAuth2 access token that isn’t valid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(Errors), description: "IFTTT is trying to reach a URL that doesn’t exist.")]
        [SwaggerResponse(statusCode: 429, type: typeof(Errors), description: "IFTTT has sent too many requests in a given amount of time.")]
        [SwaggerResponse(statusCode: 500, type: typeof(Errors), description: "There was an error in your application logic.")]
        [SwaggerResponse(statusCode: 503, type: typeof(Errors), description: "Your service is not available at the moment, but IFTTT should try again later.")]
        public virtual IActionResult TriggersTaskPost([FromBody]object body, [FromHeader]string accept, [FromHeader]string acceptCharset, [FromHeader]List<string> acceptEncoding, [FromHeader]string xRequestID)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse200));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(Errors));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Errors));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Errors));

            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429, default(Errors));

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(Errors));

            //TODO: Uncomment the next line to return response 503 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(503, default(Errors));

            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"meta\" : {\n      \"id\" : \"id\",\n      \"timestamp\" : 0\n    },\n    \"created_at\" : { },\n    \"title\" : { }\n  }, {\n    \"meta\" : {\n      \"id\" : \"id\",\n      \"timestamp\" : 0\n    },\n    \"created_at\" : { },\n    \"title\" : { }\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse200>(exampleJson)
            : default(InlineResponse200);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
